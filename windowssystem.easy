"sl/control" useFile

{ lpFileName:"";
  dwDesiredAccess: 0i32;
  dwShareMode: 0i32;
  lpSecurityAttributes: 0nx;
  dwCreationDisposition: 0i32;
  dwFlagsAndAttributes: 0i32;
  hTemplateFile: 0nx;}
{ hFile: 0nx; }
"Kernel32" "CreateFileA"   importDynamic

{ hFile: 0nx;
  lpFileSize: 0nx;  }
{ result: 0n32; }
 "Kernel32" "GetFileSizeEx" importDynamic

{
  hFile: 0nx;
  lpBuffer: 0nx;
  nNumberOfBytesToRead: 0n32;
  lpNumberOfBytesRead: 0nx;
  lpOverlapped: 0nx;
}
()
"Kernel32" "ReadFile"      importDynamic

{ hFile: 0nx;}
()
"Kernel32" "CloseHandle"   importDynamic

()
{errorCode: 0n32;}
"Kernel32" "GetLastError"  importDynamic

WindowsSystem: {
  loadFile: [
    name:;
    NULL: 0nx;
    GENERIC_READ: 0x80000000;
    FILE_SHARE_READ: 0x00000001;
    OPEN_EXISTING: 3i32;
    fileHandle:  name GENERIC_READ FILE_SHARE_READ NULL OPEN_EXISTING 0i32 NULL CreateFileA;
    fileHandle 0xffffffffnx = [
#      "Load file " name & " error " & print GetLastError print LF print
      FALSE
    ] [
      fileSizePointer: 8n32 allocateMemory;
      fileSize: 0n32 fileHandle fileSizePointer GetFileSizeEx drop fileSizePointer readMemory;
      stringPointer:  fileSize 1n32 + allocateMemory;
      0n8 stringPointer fileSize 0nx cast + writeMemory
      fileHandle stringPointer fileSize fileSizePointer NULL ReadFile
      fileHandle CloseHandle
      stringPointer fileSize memoryToText
      stringPointer freeMemory
      fileSizePointer freeMemory
      TRUE
    ] if
  ] func;

  hasImportDynamic: FALSE;

  hasFileSystem: TRUE;
};
